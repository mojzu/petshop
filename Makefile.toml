# Build docker image tasks

[tasks.docker-build-go-tools]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/go-tools:latest
docker build --tag petshop/go-tools:latest --file docker/go-tools.dockerfile .
'''

[tasks.docker-build-node-tools]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/node-tools:latest
docker build --tag petshop/node-tools:latest --file docker/node-tools.dockerfile .
'''

[tasks.docker-build-rust-tools]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/rust-tools:latest
docker build --tag petshop/rust-tools:latest --file docker/rust-tools.dockerfile .
'''

[tasks.docker-build-rust-cache]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/rust-cache:latest
docker build --tag petshop/rust-cache:latest --file docker/rust-cache.dockerfile .
'''

[tasks.docker-build-envoy]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/envoy:latest
docker build --tag petshop/envoy:latest --file docker/envoy.dockerfile .
docker build --tag petshop/envoy-compose:latest --file docker/envoy-compose.dockerfile .
'''

[tasks.docker-build-client-playground]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/client-playground:latest
docker build --tag petshop/client-playground:latest --file docker/client-playground.dockerfile .
'''

[tasks.docker-build-integration-test]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/integration-test:latest
docker build --tag petshop/integration-test:latest --file docker/integration-test.dockerfile .
'''

[tasks.docker-build-oauth2-proxy]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/oauth2-proxy:latest
docker build --tag petshop/oauth2-proxy:latest --file docker/oauth2-proxy.dockerfile .
'''

[tasks.docker-build-prometheus]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/prometheus-compose:latest
docker build --tag petshop/prometheus-compose:latest --file docker/prometheus-compose.dockerfile .
'''

[tasks.docker-build-server]
category = "Petshop"
workspace = false
script = '''
echo Building petshop/server:latest
docker build --tag petshop/server:latest --file docker/server.dockerfile .
'''

[tasks.docker-build-tools]
description = "Build docker tools images that do not rely on generated outputs"
category = "Petshop"
workspace = false
dependencies = [
    "docker-build-go-tools",
    "docker-build-rust-tools"
]

[tasks.docker-build]
description = "Build docker images that do not rely on generated outputs"
category = "Petshop"
workspace = false
dependencies = [
    "docker-build-tools",
    "docker-build-rust-cache",
    "docker-build-prometheus",
    "docker-build-server"
]

# Run docker container tools

[tasks.go-tools-run]
description = "Run go-tools image with arguments"
category = "Petshop"
workspace = false
script = '''
echo Running petshop/go-tools:latest
docker run --rm -v "$(pwd):/src" --user "$(id -u):$(id -g)" petshop/go-tools:latest ${@}
'''

[tasks.node-tools-run]
description = "Run node-tools image with arguments"
category = "Petshop"
workspace = false
script = '''
echo Running petshop/node-tools:latest
docker run --rm -v "$(pwd)/docker/node-tools/client-playground:/home/node/client-playground" \
    -v "$(pwd)/docker/node-tools/integration-test:/home/node/integration-test" \
    --user "$(id -u):$(id -g)" petshop/node-tools:latest ${@}
'''

# Run docker container tools interactively

[tasks.go-tools]
description = "Run go-tools image interactively"
category = "Petshop"
workspace = false
script = '''
echo Running petshop/go-tools:latest
docker run --rm -it -v "$(pwd):/src" --user "$(id -u):$(id -g)" --network=host petshop/go-tools:latest ${@}
'''

[tasks.node-tools]
description = "Run node-tools image interactively"
category = "Petshop"
workspace = false
script = '''
echo Running petshop/node-tools:latest
docker run --rm -it -v "$(pwd)/docker/node-tools/client-playground:/home/node/client-playground" \
    -v "$(pwd)/docker/node-tools/integration-test:/home/node/integration-test" \
    --user "$(id -u):$(id -g)" --network=host petshop/node-tools:latest ${@}
'''

[tasks.rust-tools]
description = "Run rust-tools image interactively"
category = "Petshop"
workspace = false
script = '''
echo Running petshop/rust-tools:latest
docker run --rm -it -v "$(pwd):/src" --user "$(id -u):$(id -g)" --network=host petshop/rust-tools:latest ${@}
'''

# Protobuf/openapi generator tasks

[tasks.generate-protoc-protobuf]
description = "Generate protobuf descriptor file"
category = "Petshop"
workspace = false
script = '''
echo Generating protobuf descriptor set dist/api.pb
mkdir -p ./dist
cargo make go-tools-run -- protoc -I/usr/local/include -I/go/src -I/src/proto/proto \
    --include_imports --include_source_info \
    --descriptor_set_out=/src/dist/api.pb /src/proto/proto/api.proto /src/proto/proto/health.proto
rm -rf ./examples/tfb/api.pb
cp ./dist/api.pb ./examples/tfb/api.pb
'''

[tasks.generate-protoc-openapi]
description = "Generate openapi definition file"
category = "Petshop"
workspace = false
script = '''
echo Generating openapi v2 specification dist/api.swagger.json
mkdir -p ./dist
cargo make go-tools-run -- protoc -I/usr/local/include -I/go/src -I/src/proto/proto \
    --openapiv2_out /src/dist --openapiv2_opt \
    logtostderr=true /src/proto/proto/api.proto
'''

[tasks.generate-axios-client]
description = "Generate axios client"
category = "Petshop"
workspace = false
script = '''
echo Generating axios client dist/axios
rm -rf ./dist/axios
mkdir -p ./dist/axios
# DEPEND: docker pull openapitools/openapi-generator-cli:v5.0.1
# <https://hub.docker.com/r/openapitools/openapi-generator-cli>
docker run --rm -v "$(pwd):/workspace" --user "$(id -u):$(id -g)" openapitools/openapi-generator-cli:v5.0.1 \
    generate -i /workspace/dist/api.swagger.json \
    -g typescript-axios \
    -o /workspace/dist/axios
(cd ./dist/axios \
    && rm -rf .openapi-generator .gitignore .npmignore .openapi-generator-ignore git_push.sh)
rm -rf ./docker/node-tools/axios
cp -r ./dist/axios ./docker/node-tools/axios
'''

[tasks.generate-grpc-web-client]
description = "Generate grpc-web client"
category = "Petshop"
workspace = false
script = '''
echo Generating grpc-web client dist/grpc-web
rm -rf ./dist/grpc-web
mkdir -p ./dist/grpc-web
cargo make go-tools-run -- protoc -I/usr/local/include -I/go/src -I/src/proto/proto \
    --js_out=import_style=commonjs:/src/dist/grpc-web \
    --grpc-web_out=import_style=commonjs+dts,mode=grpcwebtext:/src/dist/grpc-web \
    /src/proto/proto/api.proto \
    /src/proto/proto/google/api/annotations.proto \
    /src/proto/proto/google/api/field_behavior.proto \
    /src/proto/proto/google/api/http.proto \
    /src/proto/proto/google/api/httpbody.proto \
    /src/proto/proto/protoc-gen-openapiv2/options/annotations.proto \
    /src/proto/proto/protoc-gen-openapiv2/options/openapiv2.proto
rm -rf ./docker/node-tools/grpc-web
cp -r ./dist/grpc-web ./docker/node-tools/grpc-web
'''

[tasks.generate-envoy-flow]
description = "Build generated envoy outputs"
category = "Petshop"
workspace = false
dependencies = [
    "generate-protoc-protobuf",
    "docker-build-envoy"
]

[tasks.generate-client-flow]
description = "Build generated client outputs"
category = "Petshop"
workspace = false
dependencies = [
    "generate-protoc-openapi",
    "generate-axios-client",
    "generate-grpc-web-client",
    "docker-build-node-tools",
    "docker-build-client-playground",
    "docker-build-integration-test",
    "docker-build-oauth2-proxy"
]

[tasks.generate-flow]
description = "Build generated outputs"
category = "Petshop"
workspace = false
dependencies = [
    "generate-envoy-flow",
    "generate-client-flow"
]

# Development tasks

[tasks.dev-envoy]
description = "Build and run envoy docker image"
category = "Petshop"
workspace = false
dependencies = [
    "generate-envoy-flow"
]
script = '''
echo Running petshop/envoy:latest
docker run --rm -it --network=host petshop/envoy:latest
'''

[tasks.dev-postgres]
description = "Run postgres docker image"
category = "Petshop"
workspace = false
script = '''
echo Running postgres:13.2-alpine
docker run --rm -it --network=host -e POSTGRES_PASSWORD=postgres postgres:13.2-alpine
'''

[tasks.dev-server]
description = "Build and run server"
category = "Petshop"
workspace = false
script = '''
echo Running petshop_server
export RUST_LOG="petshop_server=debug,tokio_postgres=debug"
export CONFIG_TRACING_JSON="false"
export CONFIG_API_HOST="0.0.0.0"
export CONFIG_API_PORT="5000"
export CONFIG_INTERNAL_HOST="0.0.0.0"
export CONFIG_INTERNAL_PORT="5501"
export CONFIG_POSTGRES__USER="postgres"
export CONFIG_POSTGRES__PASSWORD="postgres"
export CONFIG_POSTGRES__DBNAME="postgres"
export CONFIG_POSTGRES__HOST="localhost"
export CONFIG_POSTGRES__PORT="5432"

cargo run --bin petshop_server -- ${@}
'''

[tasks.dev-server-release]
description = "Build and run server docker image"
category = "Petshop"
workspace = false
dependencies = [
    "docker-build"
]
script = '''
echo Running petshop/server:latest
docker run --rm -it --network=host petshop/server:latest
'''

[tasks.dev-client-playground]
description = "Build and run client-playground using node-tools image"
category = "Petshop"
workspace = false
dependencies = [
    "generate-client-flow"
]
script = '''
echo Running node-tools/client-playground
cargo make node-tools -- npm run client-playground
'''

[tasks.dev-integration-test]
description = "Build and run integration-test using node-tools image"
category = "Petshop"
workspace = false
dependencies = [
    "generate-client-flow"
]
script = '''
echo Running node-tools/integration-test
cargo make node-tools -- npm run integration-test
'''

# Docker compose tasks

[tasks.compose]
description = "Run docker-compose with default compose file"
category = "Petshop"
workspace = false
script = '''
docker-compose ${@}
'''

[tasks.compose-ci]
description = "Build generated outputs and run docker-compose with CI compose file"
category = "Petshop"
workspace = false
dependencies = [
    "docker-build-tools",
    "docker-build-rust-cache",
    "generate-flow"
]
script = '''
docker-compose -f docker-compose.ci.yml ${@}
'''

[tasks.compose-ci-down]
description = "Stop and remove docker-compose with CI compose file"
category = "Petshop"
workspace = false
script = '''
docker-compose -f docker-compose.ci.yml down
'''

# Distribution tasks

[tasks.dist-clean-images]
description = "Clean docker images"
category = "Petshop"
workspace = false
script = '''
docker image rm -f \
    petshop-authz/client-oauth2-proxy:latest \
    petshop-authz/envoy:latest \
    petshop-authz/server-oauth2-proxy:latest \
    petshop/client-playground:latest \
    petshop/integration-test:latest \
    petshop/envoy:latest \
    petshop/envoy-compose:latest \
    petshop/go-tools:latest \
    petshop/node-tools:latest \
    petshop/oauth2-proxy:latest \
    petshop/prometheus-compose:latest \
    petshop/rust-cache:latest \
    petshop/rust-tools:latest \
    petshop/server:latest
'''

[tasks.dist-clean]
description = "Clean generated outputs"
category = "Petshop"
workspace = false
script = '''
rm -rf ./dist ./docker/node-tools/grpc-web ./docker/node-tools/axios
'''

[tasks.dist-build]
description = "Build all docker images and generated outputs"
category = "Petshop"
workspace = false
dependencies = [
    "dist-clean",
    "docker-build",
    "generate-flow"
]

[tasks.dist-ci-build]
description = "Build server and envoy docker images"
category = "Petshop"
workspace = false
dependencies = [
    "docker-build-tools",
    "docker-build-rust-cache",
    "docker-build-server",
    "generate-envoy-flow"
]

# Default tasks

[tasks.format]
[tasks.format-toml]
[tasks.clippy]
[tasks.check]
[tasks.audit]
[tasks.docs]
[tasks.dev-test-flow]
[tasks.test-flow]
[tasks.ci-flow]

[tasks.print-cargo-make-env]
[tasks.print-project-env]
[tasks.print-ci-env]
[tasks.print-git-env]
[tasks.print-rust-env]
[tasks.print-cargo-env]
[tasks.print-crate-env]
[tasks.print-env]
category = "Petshop"
workspace = false
dependencies = [
    "print-cargo-make-env",
    "print-project-env",
    "print-ci-env",
    "print-git-env",
    "print-rust-env",
    "print-cargo-env",
    "print-crate-env"
]
