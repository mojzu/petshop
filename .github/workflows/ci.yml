name: CI

on:
  push:
    branches:
      - main

    tags:
      - v*

  pull_request:
    branches:
      - main

env:
  CLICOLOR_FORCE: 1
  CURRENT_VERSION: "0.2.0"

jobs:
  rust-ci:
    name: Rust CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Add `, beta, nightly` to array for more tests
        rust: [stable]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install cargo-make
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --debug cargo-make

      - name: Run CI
        if: matrix.rust != 'nightly'
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: ci-flow

      - name: Run CI (Allow Failures)
        if: matrix.rust == 'nightly'
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: ci-flow

  docker-ci:
    name: Docker CI
    # needs: rust-ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-make
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --debug cargo-make

      - name: Set Version
        run: |
          # Strip git ref prefix from ref
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Default build version
          BUILD_VERSION=$VERSION

          # Build version from current version, ref and run number for latest
          [ "$VERSION" == "main" ] && BUILD_VERSION=${CURRENT_VERSION}-latest.${GITHUB_RUN_NUMBER}

          # Default docker version
          DOCKER_VERSION=$VERSION

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && DOCKER_VERSION=latest

          # Default NPM publish tag
          PUBLISH_TAG=latest

          # Use NPM `next` tag convention
          [ "$VERSION" == "main" ] && PUBLISH_TAG=next

          echo BUILD_VERSION=$BUILD_VERSION
          echo DOCKER_VERSION=$DOCKER_VERSION
          echo PUBLISH_TAG=$PUBLISH_TAG

          # Apply build version
          cargo make dist-version $BUILD_VERSION

          # Save versions to environment
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "DOCKER_VERSION=$DOCKER_VERSION" >> $GITHUB_ENV
          echo "PUBLISH_TAG=$PUBLISH_TAG" >> $GITHUB_ENV

      - name: Run CI
        run: |
          cargo make compose-ci run sut
          cargo make compose-ci-down

      - name: Build Images
        if: github.event_name == 'push'
        run: |
          cargo make dist-ci-build

      - name: Setup GitHub Packages
        if: github.event_name == 'push'
        run: |
          # Github packages login
          echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u mojzu --password-stdin

      - name: Push Images
        if: github.event_name == 'push'
        run: |
          echo IMAGE=ghcr.io/mojzu/petshop-envoy:${{ env.DOCKER_VERSION }}
          docker tag petshop/envoy:latest ghcr.io/mojzu/petshop-envoy:${{ env.DOCKER_VERSION }}
          docker push ghcr.io/mojzu/petshop-envoy:${{ env.DOCKER_VERSION }}

          echo IMAGE=ghcr.io/mojzu/petshop-server:${{ env.DOCKER_VERSION }}
          docker tag petshop/server:latest ghcr.io/mojzu/petshop-server:${{ env.DOCKER_VERSION }}
          docker push ghcr.io/mojzu/petshop-server:${{ env.DOCKER_VERSION }}

      - name: Setup Node
        if: github.event_name == 'push'
        uses: actions/setup-node@v2
        with:
          # DEPEND: Update node version here
          node-version: "15.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Publish Package
        if: github.event_name == 'push'
        env:
          NODE_AUTH_TOKEN: "${{ secrets.CR_PAT }}"
        run: |
          cargo make clients-publish ${{ env.PUBLISH_TAG }}
